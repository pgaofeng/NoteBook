function tocSetup() {
    let firstLoad = true
    // 当前滚动的位置
    let currentIndex = 0
    // 目录的条目
    let tocItems = document.querySelectorAll('.toc-link')
    // 对应目录的标题
    let titleItems = document.querySelectorAll('.headerlink')
    let lastYOffset = window.pageYOffset
    let tocContainer = document.querySelector('.toc')
    let mainContainer = document.querySelector('.main-column')
    let mLastTime = 0
    const slop = 50
    
    // 添加布局滚动的监听
    document.addEventListener('scroll', () => {
        // 防抖
        if(performance.now() - mLastTime < 300) {
            return
        }
        mLastTime = performance.now()
        onPageScroll()
    })
    onPageScroll()
    function onPageScroll() {
        
        // 计算当前应该显示那条标题
        let lastPosition = currentIndex
        computeShowTitle()
        if(lastPosition != currentIndex || firstLoad) {
            tocItems[lastPosition].classList.remove('active')
            tocItems[currentIndex].classList.add('active')
            firstLoad = false
        }
        // 计算当前滚动的位置
        let offsetRelative = 0
        for(i = 0; i < currentIndex; i++) {
            offsetRelative += tocItems[currentIndex].clientHeight
        }
        let targetOffset = offsetRelative - (tocContainer.clientHeight - tocItems[currentIndex].clientHeight) / 2
        tocContainer.scrollTo({top: targetOffset, behavior: 'auto'})
        
    }
    // 计算当前应该显示那条标题
    function computeShowTitle() {
        let last = lastYOffset
        lastYOffset = window.pageYOffset
        // 滚动条向下移动
        if(last < window.pageYOffset) {
            do {
                // 滚动到最后一个条目了
                if(currentIndex == titleItems.length -1) {
                   return
                }
                let nextTop
                if (currentIndex + 1 < titleItems.length) {
                    nextTop = titleItems[currentIndex + 1].getBoundingClientRect().top
                }
                if(nextTop < slop) {
                    currentIndex ++
                } else {
                    return
                }
            } while(currentIndex < titleItems.length);   
        } else {
            // 滚动条向上移动
            do {
                // 滚动到第一个条目了
               if(currentIndex == 0) {
                   return
               } 
               let currTop = titleItems[currentIndex].getBoundingClientRect().top
               if(currTop > slop) {
                   currentIndex --
               } else {
                   return
               }
            } while(currentIndex > 0)
        }
    }
}
var icon_copy = '<svg t="1721397106280" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2572" width="16" height="16"><path d="M878.272 981.312H375.36a104.64 104.64 0 0 1-104.64-104.64V375.36c0-57.792 46.848-104.64 104.64-104.64h502.912c57.792 0 104.64 46.848 104.64 104.64v502.912c-1.6 56.192-48.448 103.04-104.64 103.04z m-502.912-616.96a10.688 10.688 0 0 0-10.944 11.008v502.912c0 6.208 4.672 10.88 10.88 10.88h502.976c6.208 0 10.88-4.672 10.88-10.88V375.36a10.688 10.688 0 0 0-10.88-10.944H375.36z" fill="#707070" p-id="2573"></path><path d="M192.64 753.28h-45.312a104.64 104.64 0 0 1-104.64-104.64V147.328c0-57.792 46.848-104.64 104.64-104.64h502.912c57.792 0 104.64 46.848 104.64 104.64v49.92a46.016 46.016 0 0 1-46.848 46.912 46.08 46.08 0 0 1-46.848-46.848v-49.984a10.688 10.688 0 0 0-10.944-10.944H147.328a10.688 10.688 0 0 0-10.944 10.88v502.976c0 6.208 4.672 10.88 10.88 10.88h45.312a46.08 46.08 0 0 1 46.848 46.912c0 26.496-21.824 45.248-46.848 45.248z" fill="#707070" p-id="2574"></path></svg>'
var icon_yes = '<svg t="1721397537158" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="7590" width="16" height="16"><path d="M479.287 761.117c-28.762 28.039-75.489 28.039-104.251 0l-234.739-229.703c-28.762-28.039-28.762-74.052 0-102.087s75.489-28.039 104.251 0l182.615 178.658 351.927-344.736c28.762-28.039 75.489-28.039 104.251 0s28.762 74.052 0 102.087l-404.048 395.781z" fill="#707070" p-id="7591"></path></svg>'
function addCopyButton() {
    let count = 0
    document.querySelectorAll(".highlight > table").forEach(oldElement => {
        let newElement = document.createElement("div")
        newElement.classList.add('copy-wrapper')
        let copyButton = document.createElement("button")
        copyButton.classList.add("btn-copy")
        copyButton.innerHTML = icon_copy
        copyButton.setAttribute('data-clipboard-target', '.copy-code-' + count)
        oldElement.replaceWith(newElement)
        newElement.appendChild(copyButton)
        newElement.appendChild(oldElement)
        let codeElement = oldElement.querySelector('.hljs')
        if(codeElement) {
            codeElement.classList.add("copy-code-" + count)
        }
        newElement.addEventListener('mouseenter', ()=> {
            copyButton.style.display='block'
        })
        newElement.addEventListener('mouseleave', ()=>{
            copyButton.style.display='none'
        })
        count++
    })
}